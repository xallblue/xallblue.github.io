" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

":help [setting]

"Colors
"colorscheme solarized    " awesome colorscheme
syntax enable 			" enable syntax processing

"Spaces & Tabs
set tabstop=4 			" number of visual spaces per TAB,the number of spaces a tab counts for. So, when Vim opens a file and reads a <TAB> character, it uses that many spaces to visually show the <TAB>
set softtabstop=4 		" number of spaces in tab when editing, inserted or removed
set expandtab       	" tabs are spaces,ï¼expandtab turns <TAB>s into spaces. So <TAB> just becomes a shortcut for "insert four spaces".
set autoindent			" indent when moving to the next line while writing code
set shiftwidth=4		" when using the >> or << commands, shift lines by 4 spaces

"UI Config
set number 				" show line numbers 
"set showcmd             " show the last command entered in the very bottom right of Vim. But it's actually not shown in my Vim since I use powerline plugin.
set cursorline          " draw a horizontal highlight (or underline, depending on your colorscheme) on the line your cursor is currently on.
filetype indent on      " load filetype-specific indent files. This both turns on filetype detection and allows loading of language specific indentation files based on that detection. For me, this means the python indentation file that lives at ~/.vim/indent/python.vim gets loaded every time I open a *.py file.
set wildmenu            " visual autocomplete for command menu,for instance, run :e ~/.vim<TAB>? Well it will provide a graphical menu of all the matches you can cycle through.
set lazyredraw          " redraw only when we need to.Vim loves to redraw the screen during things it probably doesn't need to,like in the middle of macros. This tells Vim not to bother redrawing during these scenarios, leading to faster macros.
"set showmatch           " highlight matching [{()}],when your cursor moves over a parenthesis-like character, the matching one will be highlighted as well.
execute pathogen#infect() 
